@model PackageListViewModel
@{
    ViewBag.Title = string.IsNullOrWhiteSpace(Model.SearchTerm) ? "Packages" : "Packages matching " + Model.SearchTerm;
    ViewBag.Tab = "Packages";
    var moderationQueue = !string.IsNullOrWhiteSpace(Model.ModeratorQueue) && Model.ModeratorQueue.Equals(bool.TrueString, StringComparison.InvariantCultureIgnoreCase);
    var moderationCount = Model.ModerationUpdatedPackageCount + Model.ModerationSubmittedPackageCount + Model.ModerationWaitingPackageCount + Model.ModerationRespondedPackageCount;
    var unreviewedCount = Model.TotalCount - moderationCount;

    var moderationRole = User != null && User.IsInAnyModerationRole();
}

@*

    //todo NEWSITE finish search box integration
    <div id="searchBox" role="search">
      <form action="@Url.PackageList()" method="get">
        <input name="q" id="searchBoxInput" title="Search by id only with 'id:searchValue'. Search by tags with 'tag:searchValue'." placeholder="Search Packages" value="@(String.IsNullOrEmpty(ViewBag.SearchTerm) ? "" : ViewBag.SearchTerm)" autofocus />
        <input id="searchBoxSubmit" title="Search by id only with 'id:searchValue'. Search by tags with 'tag:searchValue'." type="submit" value=" " />
      </form>
    </div>

*@


  @if (!User.Identity.IsAuthenticated)
  {
      <div class="p">
        <div class="block full-width m-t p-b clearfix p">
          @* <div class="m-b h3">
            <div class="package-search m-r border-radius">
                <form class="p full-width" action="@Url.PackageList()" method="get">
                    <input name="q" id="search" type="search" class="p full-width" title="Search by id only with 'id:searchValue'. Search by tags with 'tag:searchValue'." placeholder="Search community packages..." value="@(String.IsNullOrEmpty(ViewBag.SearchTerm) ? "" : ViewBag.SearchTerm)" />
                    <input id="searchBoxSubmit" title="Search by id only with 'id:searchValue'. Search by tags with 'tag:searchValue'." type="submit" value=" " />
                </form>
            </div>
        </div>*@
          
        @if (@HttpContext.Current.Request.Cookies["chocolatey_hide_packages_disclaimer"] == null)
        {
            <div class="flex modal-closeable" id="package-disclaimer">
                <div class="message-content">
                    <p class="no-margin">
                        Your use of the packages on this site means you understand they are not to be used for 
                        organizational or production purposes and they are not supported or guaranteed in any 
                        way. For more details why, <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "community-packages-disclaimer" })">please read the disclaimer.</a>
                    </p>
                    <div class="close button"><i class="fa fa-fw fa-check-circle-o"></i>I Understand.</div>
                </div>
            </div>
        }
        </div>
      </div>
  }
<div class="hgroup search">
    <div style="float:right">
        <a href="https://feeds.feedburner.com/chocolatey" title="Subscribe to package updates" rel="alternate" type="application/rss+xml"><img src="https://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="RSS" style="border:0" />&nbsp;<span>Subscribe to updates</span></a>
        <br />
        <form style="border:0px solid #ccc;padding:1px;text-align:center;" action="https://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open('https://feedburner.google.com/fb/a/mailverify?uri=chocolatey', 'popupwindow', 'scrollbars=yes,width=550,height=520');return true"><input type="hidden" value="chocolatey" name="uri" /><input type="hidden" name="loc" value="en_US" />Or subcribe by <input type="submit" value="email" /></form>
    </div>
    @if (!String.IsNullOrEmpty(Model.SearchTerm))
    {
        <h1>
            Search for "@Model.SearchTerm" returned @Model.TotalCount @if (Model.TotalCount == 1)
            { <text>package</text> }
            else
            { <text>packages</text> }
        </h1>
    }
    else
    {
        if (moderationQueue)
        {
            <h1>
                @if (Model.TotalCount == 1)
                { <text>There is @moderationCount package in moderation</text> }
                else
                { <text>There are @moderationCount packages in moderation</text> }
        </h1>
        <h2>@Model.ModerationUpdatedPackageCount Updated | @Model.ModerationRespondedPackageCount Responded | @Model.ModerationSubmittedPackageCount Submitted | @Model.ModerationWaitingPackageCount Waiting for Maintainer | @unreviewedCount Unreviewed</h2>
        }
        else
        {
            <h1>
                @if (Model.TotalCount == 1)
                { <text>There is @Model.TotalCount community maintained package</text> }
                else
                { <text>There are @Model.TotalCount community maintained packages</text> }
        </h1>
        }

    }
    @if (@Model.LastResultIndex > 0)
    {
        <h2>Displaying results @Model.FirstResultIndex - @Model.LastResultIndex.</h2>
    }
</div>
<form method="get" action="">
    <fieldset class="form search">
        <legend>Sort Order</legend>
        <input type="hidden" name="q" value="@Model.SearchTerm" />
        <div class="form-field">
            <select name="moderatorQueue" id="moderatorQueue">
                @ViewHelpers.Option("", "Normal View", Model.ModeratorQueue)
                @ViewHelpers.Option("true", "Moderator Queue", Model.ModeratorQueue)
            </select>

            <select name="prerelease" id="prerelease">
                @ViewHelpers.Option("false", "Stable Only", Model.IncludePrerelease)
                @ViewHelpers.Option("true", "Include Prerelease", Model.IncludePrerelease)
            </select>

            <label for="sortOrder">Sort By</label>
            <select name="sortOrder" id="sortOrder">
                @if (!Model.SearchTerm.IsEmpty())
                {
                    @ViewHelpers.Option(Constants.RelevanceSortOrder, "Relevance", Model.SortOrder)
                }
                @ViewHelpers.Option(Constants.PopularitySortOrder, "Popularity", Model.SortOrder)
                @ViewHelpers.Option(Constants.AlphabeticSortOrder, "A-Z", Model.SortOrder)
                @ViewHelpers.Option(Constants.RecentSortOrder, "Recent", Model.SortOrder)
            </select>
        </div>
    </fieldset>
</form>
<ol id="searchResults">
    @foreach (var package in Model.Items)
    {
        <li>
            @Html.Partial(MVC.Packages.Views._ListPackage, package)
        </li>
    }
</ol>

@ViewHelpers.PreviousNextPager(Model.Pager)
@section BottomScripts {
    <script>
        $(function () {
            $("#sortOrder,#prerelease,#moderatorQueue").change(function () {
                $(this).closest("form").submit();
            });

            $(".modal-closeable .close").click(function (e) {
                $(e.target).closest(".modal-closeable").hide();
                var d = new Date();
                // 100 years in milliseconds: 100 years * 365 days * 24 hours * 60 minutes * 60 seconds * 1000ms
                d.setTime(d.getTime() + (100 * 365 * 24 * 60 * 60 * 1000));
                var expires = "expires=" + d.toUTCString();
                document.cookie = "chocolatey_hide_packages_disclaimer=true;" + expires + ";path=/";
            });
        });
    </script>
}
