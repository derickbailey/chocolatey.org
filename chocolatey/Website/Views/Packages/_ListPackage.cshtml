@model ListPackageItemViewModel
@{
    var isSubmitted = Model.Status == PackageStatusType.Submitted;
    
    var submittedStatus = Model.SubmittedStatus;
    var packageImage = Url.ImageUrl(Model.Id, Model.Version, Model.IconUrl);

    var ballImageUrl = "~/content/images/grey_ball_48.png";
    switch (Model.PackageTestResultsStatus)
    {
         case PackageAutomatedReviewResultStatusType.Pending:
            ballImageUrl ="~/content/images/yellow_ball_48.png";
                break;
         case PackageAutomatedReviewResultStatusType.Failing:
            ballImageUrl = "~/content/images/red_ball_48.png";
                break;
         case PackageAutomatedReviewResultStatusType.Passing:
            ballImageUrl = "~/content/images/green_ball_48.png";
                break;
     }
    
}
<section class="package @if (Model.IsOwner(User)) {<text>my-package </text>} @if (Model.Status == PackageStatusType.Unknown) {<text> unknown-status</text>} @if (Model.Status == PackageStatusType.Submitted) {<text>@submittedStatus.ToString().ToLower()</text>}">
    @if (isSubmitted)
    {
        <div class="moderator-side">
            @switch (submittedStatus)
            {
                case PackageSubmittedStatusType.Pending:
                    <span class="ready">Pending Automated Review</span>
                    break;
                case PackageSubmittedStatusType.Ready:
                    <span class="ready">Ready</span>
                    break;
                case PackageSubmittedStatusType.Updated:
                    <span class="updated">Updated</span>
                    @ViewHelpers.GravatarImage(Model.ReviewerEmailAddress, Model.ReviewerUserName, 32)
                    break;
                case PackageSubmittedStatusType.Responded:
                    <span class="responded">Responded</span>
                     if (!string.IsNullOrWhiteSpace(Model.ReviewerEmailAddress))
                     {
                        @ViewHelpers.GravatarImage(Model.ReviewerEmailAddress, Model.ReviewerUserName, 32)    
                     }
                    
                    break;
                default:
                    <span class="waiting">Waiting for Maintainer</span>
                    @ViewHelpers.GravatarImage(Model.ReviewerEmailAddress, Model.ReviewerUserName, 32)
                    break;
            }
        </div>        
    }
    <header> 
        <div class="side">
            <a href="@Url.Package(Model)" title="View more about @Model.Title">
                <img src="@(Url.Content(packageImage ?? @Links.Content.Images.packageDefaultIcon_50x50_png))" alt="@Model.Id icon" onerror="this.src='@Links.Content.Images.packageDefaultIcon_50x50_png';" />
                <img class="package-testing" src="@Url.Content(ballImageUrl)" title="Package testing. See package page for more details." alt="Package testing. See package page for more details." />
            </a>
        </div>
        <div class="main">
            <h1><a href="@Url.Package(Model.Id, Model.UseVersion ? Model.Version : null)">@Model.Title @Model.Version</a></h1>
            @*<pre>cinst @Model.Id</pre>*@
            <h2>By:</h2>
            <ul class="owners">
                @foreach (var owner in Model.Owners) {
                    <li><a href="@Url.Action(MVC.Users.Profiles(owner.Username))" title="@owner.Username">@owner.Username</a></li>
                }
            </ul>
        </div>
    </header>
    <div class="main">

        <p>
            @if (isSubmitted)
            {
                <span>Published: @Model.PublishedDate.ToShortDateString()</span>
                if (Model.ReviewedDate.HasValue)
                {
                    <br />
                    <span>Reviewed: @Model.ReviewedDate.GetValueOrDefault().ToShortDateString()</span>
                }
                if (!string.IsNullOrWhiteSpace(Model.ReviewerUserName))
                {
                    <br />
                    <span>Reviewer: @Model.ReviewerUserName</span>
                }
            }
            else
            {
                @*if (!string.IsNullOrEmpty(Model.Summary))
                    {
                        @Model.Summary
                    }
                    else
                    {*@
            if (String.IsNullOrEmpty(Model.Description) || Model.Description.Length < 350)
            {
                @Model.Description
            }
            else
            {
                @Model.Description.Substring(0, 350)<text>... </text><a href="@Url.Package(Model)">More information</a>

            }
            @*}*@
            }

        </p>
        <div class="nuget-badge-small">
            <code>
                <span>C:\&gt; </span>choco install @Model.Id.ToLower()
                @if ((!Model.LatestVersion && !Model.LatestStableVersion) || !Model.Listed)
                { <text> --version @Model.Version</text> }
                @if (Model.Prerelease)
                {<text> --pre </text>}
            </code>
        </div>
        <footer>
            <p class="downloads">
                @Model.TotalDownloadCount.ToString("n0") downloads
            </p>

            @if (@Model.Tags.AnySafe())
            {
                <div class="tags">
                    <h2>Tags</h2>
                    <ul class="tags">
                        @foreach (var tag in Model.Tags)
                        {
                            <li><a href="@Url.Search("tag:" + tag)" title="Search for @tag">@tag</a></li>
                        }
                    </ul>
                </div>
            }
        </footer>
    </div>

</section>
