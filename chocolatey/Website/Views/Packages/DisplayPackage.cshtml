@using MarkdownSharp
@using NuGetGallery
@model DisplayPackageViewModel
@{
    ViewBag.Title = Model.Title + " " + Model.Version;
    ViewBag.Tab = "Packages";
    Layout = "~/Views/Shared/TwoColumnLayout.cshtml";
    Bundles.Reference("Scripts", "header"); 
    Bundles.Reference("Scripts/closeable");
    
    var markdownGenerator = new Markdown
    {
        AutoHyperlink = true,
        AutoNewLines = true,
        //EncodeProblemUrlCharacters = true,
        LinkEmails = true,
        SkipCodeBlocks = true,
    };

    var statuses = Model.Status.GetEnumerationItems().ToList();
    var packageImage = Url.ImageUrl(Model.Id, Model.Version, Model.IconUrl);
    var packageVersions = Model.PackageVersions.Count();
    var packageVersionsDefaultDisplay = 10;

    var maintainer = User != null && Model.Owners.Any(u => u.Username == User.Identity.Name);
    var moderator = User != null && User.IsModerator() && !maintainer;
    var moderationRole = User != null && User.IsInAnyModerationRole() && !maintainer;
    var moderationRoleAndMaintaner = User != null && User.IsInAnyModerationRole() && maintainer;
    var anyPackageRole = User != null && (moderationRole || maintainer);
    var hasPreviousExistingVersions = Model.PackageVersions.AnySafe(pv => pv.Listed && !pv.Prerelease);

    var expandForModeration = Model.Status == PackageStatusType.Submitted && moderationRole;

    var reviewerComments = !string.IsNullOrWhiteSpace(Model.ReviewerUserName) ? "by moderator " + Model.ReviewerUserName : "as <a href=\"https://chocolatey.org/faq#what-is-a-trusted-package\">a trusted package</a>";

    if (Model.Status == PackageStatusType.Rejected && Model.PackageTestResultsStatus == PackageAutomatedReviewResultStatusType.Pending)
    {
        Model.PackageTestResultsStatus = PackageAutomatedReviewResultStatusType.Unknown;
    }

    var packageStatus = "Unknown";
    
    switch (Model.Status)
    {
        case PackageStatusType.Submitted:
            switch (Model.SubmittedStatus)
            {
                case PackageSubmittedStatusType.Pending:
                    packageStatus = "Pending automated review";
                    break;   
                case PackageSubmittedStatusType.Ready:
                    packageStatus = "Ready for review";
                    break;    
                case PackageSubmittedStatusType.Waiting:
                    packageStatus = "Waiting for Maintainer to take corrective action";
                    break;
                case PackageSubmittedStatusType.Responded:
                    packageStatus = "Maintainer responded, waiting for review/Maintainer update";
                    break;
                case PackageSubmittedStatusType.Updated:
                    packageStatus = "Maintainer updated, waiting for Reviewer";
                    break;
            }
            break;
    }

    var packageFileMayNotBeUpdatedYetOnCdn = Model.PublishedDate.AddMinutes(31) > DateTime.UtcNow;

    var possiblePackageRepository = string.Empty;
    if (!string.IsNullOrWhiteSpace(Model.IconUrl) && string.IsNullOrWhiteSpace(Model.PackageSourceUrl))
    {
        var iconUrlSplits = Model.IconUrl.split_safe(new[] {'/'}, StringSplitOptions.RemoveEmptyEntries);
        if (Model.IconUrl.to_lower().Contains("cdn.rawgit.com") || Model.IconUrl.to_lower().Contains("raw.github.com") || Model.IconUrl.to_lower().Contains("raw.githubusercontent.com"))
        {
            if (iconUrlSplits.Length >= 4)
            {
                possiblePackageRepository = "https://github.com/{0}/{1}".format_with(iconUrlSplits[2], iconUrlSplits[3]);
            }
        }
    }
}

@section ExtraHeaders {
    @if (Model.Status == PackageStatusType.Rejected)
    {
        <meta name="robots" content="noindex" />
    }
}

@section SideColumn {
    <img class="logo" src="@(Url.Content(packageImage ?? @Links.Content.Images.packageDefaultIcon_png))" alt="Icon for package @Model.Id" title="Icon for package @Model.Id | Nuspec reference: &lt;iconUrl&gt;@Model.IconUrl&lt;/iconurl&gt;" onerror="this.src='@Links.Content.Images.packageDefaultIcon_png';" />
    <div id="stats">
        <div class="stat">
            <p class="stat-number">@Model.TotalDownloadCount.ToString("n0")</p>
            <p class="stat-label">Downloads</p>
        </div>
        <div class="stat">
            <p class="stat-number">@Model.DownloadCount.ToString("n0")</p>
            <p class="stat-label">Downloads of v @Model.Version</p>
        </div>
        <div class="stat">
            <p class="stat-number">@Model.PublishedDate.ToShortDateString()</p>
            <p class="stat-label">Last update</p>
        </div>
        @if (Model.Status == PackageStatusType.Submitted)
        {
            <div class="stat">
                <p class="stat-number">@Model.PublishedDate.ToShortDateString()</p>
                <p class="stat-label">Published Date</p>
            </div>

            if (Model.ReviewedDate.HasValue)
            {
                <div class="stat">
                    <p class="stat-number">@Model.ReviewedDate.GetValueOrDefault().ToShortDateString()</p>
                    <p class="stat-label">Reviewed Date</p>
                </div>

                <div class="stat">
                    <p class="stat-number">@ViewHelpers.GravatarImage(Model.ReviewerEmailAddress, Model.ReviewerUserName, 64)</p>
                    <p class="stat-label">Reviewer</p>
                </div>
            }
        }
    </div>
    <nav>
        <ul class="links">
            @if (!String.IsNullOrEmpty(Model.ProjectUrl))
            {
                <li><a href="@Model.ProjectUrl" title="Visit the software site to learn more about the software this package installs. Nuspec reference: &lt;projectUrl&gt;@Model.ProjectUrl&lt;/projectUrl&gt;">
                Software Site</a></li>
            }
            @if (!String.IsNullOrEmpty(Model.ProjectSourceUrl))
            {
                <li><a href="@Model.ProjectSourceUrl" title="See the software source. Nuspec reference: &lt;projectSourceUrl&gt;@Model.ProjectSourceUrl&lt;/projectSourceUrl&gt;">
                Software Source</a></li>
            }
            @if (!String.IsNullOrEmpty(Model.LicenseUrl))
            {
                <li><a href="@Model.LicenseUrl" title="Make sure you agree with the software license. Nuspec reference: &lt;licenseUrl&gt;@Model.LicenseUrl&lt;/licenseUrl&gt;">Software License</a></li>
            }
            @if (!String.IsNullOrEmpty(Model.DocsUrl))
            {
                <li><a href="@Model.DocsUrl" title="See the project's documentation. Nuspec reference: &lt;docsUrl&gt;@Model.DocsUrl&lt;/docsUrl&gt;">
                Software Docs</a></li>
            }
            @if (!String.IsNullOrEmpty(Model.MailingListUrl))
            {
                <li><a href="@Model.MailingListUrl" title="See the project's mailing list. Nuspec reference: &lt;mailingListUrl&gt;@Model.MailingListUrl&lt;/mailingListUrl&gt;">
                Software Mailing List</a></li>
            }
            @if (!String.IsNullOrEmpty(Model.BugTrackerUrl))
            {
                <li><a href="@Model.BugTrackerUrl" title="See the project's issue link. Nuspec reference: &lt;bugTrackerUrl&gt;@Model.BugTrackerUrl&lt;/bugTrackerUrl&gt;">
                Software Issues</a></li>
            }
            <li>&nbsp;</li>
            <li class="label">Package Specific</li>
            @if (!String.IsNullOrEmpty(Model.PackageSourceUrl))
            {
                <li><a href="@Model.PackageSourceUrl" title="See the package source. Nuspec reference: &lt;packageSourceUrl&gt;@Model.PackageSourceUrl&lt;/packageSourceUrl&gt;">
                Package Source</a></li>
            }
            else if (!string.IsNullOrWhiteSpace(possiblePackageRepository))
            {
              <li><a href="@possiblePackageRepository" title="This is a possible package source. NuSpec did not contain &lt;packageSourceUrl /&gt;, but it did contain an icon url from a repository location.">
                Possible Package Source</a></li>
            }
            <li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "package-triage-process" })">Package outdated?</a></li>
            <li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "package-triage-process" })">Package broken?</a></li>
            <li><a href="@Url.Action(MVC.Packages.ContactOwners(Model.Id))">Contact Maintainers</a></li>
            <li><a href="@Url.RouteUrl(RouteName.PackageVersionAction, new { action = "ContactAdmins", id = Model.Id, version = Model.Version })" title="Contact Site Moderators">
            Contact Site Admins</a></li>
            <li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "package-triage-process" })#are-you-a-software-vendor">Software Vendor?</a></li>
            <li><a href="@Url.Action(MVC.Packages.ReportAbuse(Model.Id, Model.Version))" title="Report Abuse">
            Report Abuse</a></li>

            <li><a href="@Url.PackageDownload(2, Model.Id, Model.Version)" title="Download the raw nupkg file.">
            Download</a>  @if (packageFileMayNotBeUpdatedYetOnCdn) {
                <text>(See CDN warning)</text>
            }</li>
            @if (maintainer || moderator)
            {
                <li><a href="@Url.EditPackage(Model)">Edit Package</a></li>
                <li><a href="@Url.ManagePackageOwners(Model)">Manage Maintainers</a></li>
                <li><a href="@Url.DeletePackage(Model)" class="delete">Delete Package</a></li>
            }
        </ul>
    </nav>
}
<div class="package-page">
    @if (!User.Identity.IsAuthenticated)
    {
        @Html.Partial("~/Views/Packages/_CommunityInfoDisclaimer.cshtml")
    }
    @if (Model.Prerelease)
    {
        <p class="prerelease-message">This is a prerelease version of @Model.Title. </p>
    }
    else if (!Model.IsLatestVersionAvailable && Model.Status != PackageStatusType.Submitted && Model.Status != PackageStatusType.Rejected)
    {
        <p class="not-latest-message">This is not the <a href="@Url.Package(Model.Id)" title="View the latest version">
        latest version</a> of @Model.Title available. </p>
    }
    
    @if (packageFileMayNotBeUpdatedYetOnCdn)
    {
        <p class="message error">WARNING! The package (the *.nupkg file) is subject to a CDN with a 30 minute timeout. If you have pushed an updated version, please wait for more than 30 minutes before attempting to install from the site.</p>
    }

    <div class="hgroup page-heading">
       <h1 title="Nuspec reference: &lt;title&gt;@Model.Title&lt;/title&gt;">@Model.Title</h1>
        @if (Model.Status != PackageStatusType.Rejected)
        {
            <h2 title="Nuspec reference: &lt;version&gt;@Model.Version&lt;/version&gt;">@("v" + Model.Version)</h2>
        }
        @if (Model.Status == PackageStatusType.Submitted)
        {
            <h2>(@packageStatus)</h2>
        }
      <h2>
        @switch (Model.PackageTestResultsStatus)
        {
            case PackageAutomatedReviewResultStatusType.Unknown:
                <img src="@Url.Content("~/content/images/grey_ball_48.png")" title="There are no package test results for this package" alt="There are no package test results for this package" />
                break;
            case PackageAutomatedReviewResultStatusType.Pending:
                <img src="@Url.Content("~/content/images/yellow_ball_48.png")" title="Package test results are pending" alt="Package test results are pending" />
                break;
            case PackageAutomatedReviewResultStatusType.Failing:
                <a href="@Model.PackageTestResultsUrl"><img src="@Url.Content("~/content/images/red_ball_48.png")" title="Package test results have failed. Follow the link for more information." alt="Package test results have failed." /></a>
                break;
            case PackageAutomatedReviewResultStatusType.Passing:
                <a href="@Model.PackageTestResultsUrl"><img src="@Url.Content("~/content/images/green_ball_48.png")" title="Package test results are passing. Follow the link for more information." alt="Package test results are passing." /></a>
                break;  
            case PackageAutomatedReviewResultStatusType.Exempted:
                <img src="@Url.Content("~/content/images/grey_ball_48.png")" title="This package is exempted from verification. Please see reason below." />
                break;
        }
      </h2>
    </div>
    
    @if (Model.IsDownloadCacheAvailable)
    {
        <div class="message approved">Private CDN cached downloads available for licensed customers. Never experience 404 breakages again! <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "features-private-cdn" })">Learn more...</a></div>
    }

  @if (Model.IsInstallOrPortable)
    {
        <div class="app-or-tool-message">This package is likely a meta/virtual (*) or an installer (*.install) or portable (*.portable) application package. 
          <ul>
            <li>Meta/virtual (*) - has a dependency on the *.install or the *.portable package - it is provided for discoverability and for other packages to take a dependency on.</li>
            <li>Portable (*.portable/*.commandline (deprecated naming convention)/*.tool (deprecated naming convention)) - usually zips or archives that require no administrative access to install.</li>
            <li>Install (*.install/*.app (deprecated naming convention)) - uses native installers, usually requires administrative access to install.</li>
          </ul>
          
          Learn more about chocolatey's distinction of <a href="@Url.RouteUrl(RouteName.FAQ)#what-distinction-does-chocolatey-make-between-an-installable-and-a-portable-application">
            installed versus portable apps</a> and/or learn about <a href="@Url.RouteUrl(RouteName.FAQ)#what-is-the-difference-between-packages-named-install-ie-autohotkeyinstall-portable-ie-autohotkeyportable-and--ie-autohotkey">
            this kind of package</a>. 
        </div> 
    }

    @if (Model.Status == PackageStatusType.Submitted && !anyPackageRole)
    {
        <div class="message error">This version is in <a href="@Url.RouteUrl(RouteName.FAQ)#what-is-moderation">moderation</a> and has not yet been approved. This means it doesn't show up under normal search. 
          <ul>
            <li>Until approved, you should consider this package version unsafe - it could do very bad things to your system (it probably doesn't but you have been warned, that's why we have moderation).</li>
            <li>This package version can change wildly over the course of moderation until it is approved. If you install it and it later has changes to this version, you will be out of sync with any changes
          that have been made to the package. Until approved, you should consider that this package version doesn't even exist.</li>
            <li>You cannot install this package under normal scenarios. See <a href="@Url.RouteUrl(RouteName.FAQ)#how-do-i-install-a-package-version-under-moderation">How to install package version under moderation</a> for more information.</li>
            <li>There are also no guarantees that it will be approved.</li>
          </ul>
        </div>
    }
    @if (Model.PackageVersions.Any(pv => pv.Status == PackageStatusType.Submitted))
    {
        <div class="message warning">There are versions of this package awaiting moderation @(Model.Status == PackageStatusType.Submitted ? "(possibly just this one)" : string.Empty). See the <a href="#versionhistory">Version History section</a> below.</div>
    }  
    
    @if (Model.PackageTestResultsStatus == PackageAutomatedReviewResultStatusType.Exempted)
    {
         <div class="message warning"><p>This package skips automatic verification:</p>
                @Html.Raw(markdownGenerator.Transform(Model.ExemptedFromVerificationReason.clean_html()))
         </div>
    }

    @if (Model.Status == PackageStatusType.Rejected)
    {
        <div class="message error">This package was rejected on @Model.ReviewedDate.GetValueOrDefault().ToShortDateString(). The reviewer @Model.ReviewerUserName has listed the following reason(s):
            @Html.Raw(markdownGenerator.Transform(Model.ReviewComments.clean_html()))
        </div>
    }
    else if (maintainer && !Model.Listed && Model.Status != PackageStatusType.Approved && Model.Status != PackageStatusType.Exempted)
    {
        <p class="message error">This package will remain unlisted until it has been approved by a moderator.
            You can see the package because you are one of its maintainers. You should have received an email about moderation. If you need to update/respond to the package review, please do so in the form below. If you need to contact the moderators for other reasons, feel free to respond to the email you received.
            If you have not received that email, please <a href="@Url.RouteUrl(RouteName.PackageVersionAction, new { action = "ContactAdmins", id = Model.Id, version = Model.Version })" title="Contact Site Admins">contact Site Admins</a>.
        </p>

        if (moderationRoleAndMaintaner)
        {
             <p class="message error">Since you are a maintainer of this package, you are not able to review it.</p>
        }
    }
    else if (maintainer && !Model.Listed)
    {
        <p class="message warning">This package is unlisted and hidden from package listings.
            You can see the package because you are one of its maintainers. To list the package
            again, <a href="@Url.DeletePackage(Model)">change its listing setting</a> (does not apply to unapproved packages).</p>
    }
    else if (!Model.Listed && Model.Status != PackageStatusType.Submitted)
    {
        <p class="message warning">This package is unlisted and hidden from package listings.</p>
    }
    
    @* Maintainers always see the review comments *@
    @if (Model.Status == PackageStatusType.Submitted && !anyPackageRole)
    {
        if (!string.IsNullOrWhiteSpace(Model.ReviewComments))
        {
            <div class="message"><p>Review Comments:</p>
                @Html.Raw(markdownGenerator.Transform(Model.ReviewComments.clean_html()))
            </div>
        }
    }
    else if (anyPackageRole && Model.Status != PackageStatusType.Rejected)
    {
        if (!string.IsNullOrWhiteSpace(Model.ReviewComments))
        {
            <div class="message"><p>Review Comments:</p>
                @Html.Raw(markdownGenerator.Transform(Model.ReviewComments.clean_html()))
            </div>
        }
    }

    @if (Model.Status == PackageStatusType.Approved)
    {
        <p class="message approved">This package was approved @Html.Raw(@reviewerComments) on @Model.ApprovedDate.GetValueOrDefault().ToShortDateString().</p>
    }

    @if (Model.Listed && Model.Status != PackageStatusType.Approved && Model.Status != PackageStatusType.Exempted)
    {
        <p class="message error">This package was submitted prior to moderation and has not been approved. While it is likely safe for you, there is more risk involved.</p>
    }

    @if (Model.Listed && Model.Status == PackageStatusType.Exempted)
    {
        <p class="message error">This package is exempt from moderation. While it is likely safe for you, there is more risk involved.</p>
    }
    

    @if (anyPackageRole)
    {
        if (Model.Listed || Model.Status == PackageStatusType.Rejected)
        {
        <p class="message review-instructions"> @if (Model.Status == PackageStatusType.Approved)
                                                {
                                                  <text> Package Communication / Package Test Rerun</text>
                                                }
                                                else
                                                {
                                                  <text>Package Review</text>
                                                } <a onclick="if ($(this).text() == 'Hide') {$('#div-review').hide();$(this).text('Show');} else {$('#div-review').show();$(this).text('Hide');}">Show</a></p>
            <script type="text/javascript">
                $(function() {
                    $('#div-review').hide();
                });
            </script>
        }
        <div id="div-review" class="message review-instructions">
            @if (moderationRole)
            {
                <text>Instructions for review:</text>
                <ul>
                    <li>Reviewers/Moderators must follow review process at <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "moderation" })#reviewer--moderator-process">moderation</a>.
                    <li>**Please do not reject a package until the end of the conversation.**</li>
                    <li>Check over the powershell scripts - anything look unsafe? Download urls should be official distro</li>
                    @if (Model.Status == PackageStatusType.Approved || Model.Status == PackageStatusType.Exempted)
                    {
                      <li>Moderators: Be very careful about moving a package from approved/exempt into submitted status. A package may be repushed when in this status (no matter how many downloads).</li>
                    }
                    @if (Model.Dependencies.DependencySets.Any())
                    {
                      <li>Check dependencies, make sure they are listed on the site (approved if they needed to be moderated first).</li>
                    }
                    @if (!hasPreviousExistingVersions)
                    {
                      <li>NOTE! This is a brand new package with no previous existing versions (prereleases do not count): check the name of the package. Does it meet the guidelines? This makes a package immediately rejectable as new package id will be submitted as a different package.</li> 
                    }
                    <li>Check tags</li>
                    <li>Keep in mind this is publicly visible, so do not share any sensitive data or anything you wouldn't want to share with the world.</li>
                    <li>Be Nice! :)</li>
                </ul>
            }
            else
            {
                <ul>
                  <li>You can respond to review comments here.</li>
                  <li>Keep in mind this is publicly visible, so do not share any sensitive data or anything you wouldn't want to share with the world.</li>
                  
                  @if (Model.Status == PackageStatusType.Submitted)
                  {
                     <li>You are also able to self-reject packages that may be out of date or incorrect (if the verifier fails the install). See <a href="@Url.RouteUrl(RouteName.FAQ)#how-do-i-self-reject-a-package">self-reject</a> for more information.</li>
                  }
                 
                </ul>
            }

            @using (Html.BeginForm())
            {
                <fieldset class="form">
                    <div class="form-field">
                        @Html.LabelFor(m => m.NewReviewComments)
                        @Html.TextAreaFor(m => m.NewReviewComments, new { @cols = 80, @rows = 10 })
                        @Html.ValidationMessageFor(m => m.NewReviewComments)
                        <span class="field-hint-message"></span>
                    </div>

                    <div class="form-field">
                        @Html.LabelFor(m => m.Status)
                        @if (moderator)
                        {
                            @Html.DropDownListFor(m => m.Status, statuses)
                        }
                        else
                        {
                            @Html.DisplayTextFor(m => m.Status)
                        }
                        @Html.ValidationMessageFor(m => m.Status)
                        <span class="field-hint-message"></span>
                    </div>
                    @if (moderator || Model.PackageTestResultsStatus == PackageAutomatedReviewResultStatusType.Failing)
                    {
                       <div class="form-field">
                           <input id="RerunTests" name="RerunTests" type="checkbox" value="true" />
                           <label for="RerunTests" class="for-checkbox" title="Only necessary if there was a mistake in the test run. A package repush will trigger test reruns.">Rerun tests?</label>
                       </div>
                    }
                    
                    @if (moderator && Model.PackageValidationResultStatus == PackageAutomatedReviewResultStatusType.Failing)
                    {
                       <div class="form-field">
                           <input id="OverrideValidation" name="OverrideValidation" type="checkbox" value="true" />
                           <label for="OverrideValidation" class="for-checkbox" title="Override package validation failures and run tests.">Override validation errors?</label>
                       </div>
                    }
                    @if (moderator)
                    {
                       <div class="form-field">
                           <input id="RerunVirusScanner" name="RerunVirusScanner" type="checkbox" value="true" />
                           <label for="RerunVirusScanner" class="for-checkbox" title="Rerun virus scanner to get latest reports.">Rerun virus scanner?</label>
                       </div>
                    }

                    @if (moderationRole)
                    {
                         <div class="form-field">
                             <input id="SendEmail" name="SendEmail" type="checkbox" checked="checked" value="true" />
                             <label for="SendEmail" class="for-checkbox" title="Send an email to the maintainer? They won't receive notice of your action otherwise. With normal review operations, it is normal to leave this checked.">Send Maintainer email?</label>
                         </div> 
                         <div class="form-field">
                             <input id="ChangeSubmittedStatus" name="ChangeSubmittedStatus" type="checkbox" checked="checked" value="true" />
                             <label for="ChangeSubmittedStatus" class="for-checkbox" title="If just rerunning tests or leaving a non-flagging comment (e.g. not requiring changes by the maintainer(s)), uncheck this box.">If Submitted status, require maintainer to make changes?</label>
                         </div>
                    }
                    else if (maintainer && Model.Status == PackageStatusType.Submitted && (Model.PackageTestResultsStatus == PackageAutomatedReviewResultStatusType.Failing || Model.PackageValidationResultStatus == PackageAutomatedReviewResultStatusType.Failing))
                    {
                          <div class="form-field">
                            <input id="MaintainerReject" name="MaintainerReject" type="checkbox" value="true" onclick="if (this.checked) { return confirm('Are you sure? It is not normal to reject a package.'); }" />
                              <label for="MaintainerReject" class="for-checkbox" title="If the download link is always the same and you have some older versions under review, the older versions can be rejected without issue. Under normal circumstances this should not be used.">Reject Package? Not for <a href="@Url.RouteUrl(RouteName.FAQ)#how-do-i-self-reject-a-package">normal scenarios or obsoletion</a>.</label>
                          </div> 
                    }

                    @Html.ValidationSummary(true)
                    <input type="submit" value="Save" title="Save Changes" />

                    @if (moderationRole)
                    {
                    <a onclick="if ($(this).text() == 'Hide') {$('#div-trustedpackage').hide();$(this).text('Show Trusted Section');} else {$('#div-trustedpackage').show();$(this).text('Hide');}">Show Trusted Section</a>

                        <div class="form-field" id="div-trustedpackage">
                            <ul>
                                <li>Trusted package ids are packages where we have built trust in the package maintainer(s).</li>
                                <li>This usually happens after we have seen several iterations of a package without issues.</li>
                                <li>All package *versions* submitted from now on will automatically be approved.</li>
                                <li>This also happens when maintainer is also the author of the software.</li>
                                @if (moderator)
                                {
                                    <li>Use with care.</li>
                                    <li>Use "Save" above to make this change. You may want to uncheck Send Email.</li>
                                }
                            </ul>
                            @if (moderator)
                            {
                                @Html.EditorFor(m => m.IsTrusted)
                                <label for="IsTrusted" class="checkbox">
                                    Trust this package id?
                                </label>
                            }
                            else
                            {
                              var trustedText = @Model.IsTrusted ? "is trusted" : "follows normal workflow";
                            
                                <text>This package</text> @trustedText<text>.</text>
                            }
                        </div>
                        <script type="text/javascript">
                            $(function () {
                                $('#div-trustedpackage').hide();
                            });
                        </script>
                    
                         
                   <text>|</text> <a onclick="if ($(this).text() == 'Hide') {$('#div-testexemptions').hide();$(this).text('Show Testing Exemption Section');} else {$('#div-testexemptions').show();$(this).text('Hide');}">Show Testing Exemption Section</a>

                        <div class="form-field" id="div-testexemptions">
                            <ul>
                                <li>Exempting a package id from testing requires a reason.</li>
                                @if (moderator)
                                {
                                    <li>Use with care.</li>
                                    <li>Typically this is done when a package is installing drivers the testing computer does not have</li>
                                    <li>This is NOT done just because a maintainer doesn't know how to make a program silent with Auto Hot Key.</li>
                                    <li>Use "Save" above to make this change. You may want to uncheck Send Email.</li>
                                }
                            </ul>
                            @if (moderator)
                            {
                                @Html.EditorFor(m => m.IsExemptedFromVerification)
                                <label for="IsExemptedFromVerification" class="checkbox">
                                    Exempt the package from verification testing?
                                </label>
                                   
                                <div class="form-field">
                                    @Html.LabelFor(m => m.ExemptedFromVerificationReason)
                                    @Html.TextAreaFor(m => m.ExemptedFromVerificationReason, new { @cols = 80, @rows = 10 })
                                    @Html.ValidationMessageFor(m => m.ExemptedFromVerificationReason)
                                    <span class="field-hint-message"></span>
                                </div>
                            }
                            else
                            {
                              var testInformation = @Model.IsExemptedFromVerification ? "skips automatic verification (testing)" : "follows normal workflow";
                                
                                <text>This package</text> @testInformation<text>.</text>
                                
                            }
                        </div>
                        <script type="text/javascript">
                            $(function () {
                                $('#div-testexemptions').hide();
                            });
                        </script>
                    }       
                           
                </fieldset>
            }
        </div>
    }

  <a name="description" id="description" title="Nuspec reference: description"></a>
    @Html.Raw(markdownGenerator.Transform(Model.Description.clean_html()))

    @if (Model.Listed || (anyPackageRole && Model.Status != PackageStatusType.Rejected))
    {
        <p>To install @Model.Title, run the following command from the command line or from
        PowerShell: </p>
        <div class="nuget-badge">
            <p><code><span>C:\&gt; </span>choco install @Model.Id.ToLower()
                    @if ((!Model.LatestVersion && !Model.LatestStableVersion) || !Model.Listed)
                    { <text> --version @Model.Version</text> }
                    @if (Model.Prerelease)
                    {<text> --pre </text>}</code></p>
        </div>

        <p>To upgrade @Model.Title, run the following command from the command line or from
            PowerShell: </p>
        <div class="nuget-badge">
            <p><code><span>C:\&gt; </span>choco upgrade @Model.Id.ToLower()
                    @if ((!Model.LatestVersion && !Model.LatestStableVersion) || !Model.Listed)
                    { <text> --version @Model.Version</text> }
                    @if (Model.Prerelease)
                    {<text> --pre </text>}</code></p>
        </div>
    }


    <a name="files" id="files"></a><h3 class="filesListingHeader" title="Nuspec reference: files, optional - will default to all files next to nuspec">Files</h3>
    <a id="showHideFilesListing">Hide</a>
    <div id="div-filessection">
    @if (expandForModeration)
    {
        var nuspecId = @Model.Id.Replace(".","-") + "-nuspec";
        <ul>
          <li>@Model.Id<span>.nuspec</span> 
            <a class="fileContentShowHide" onclick="if ($(this).text() == 'Hide') {$('#@nuspecId').hide();$(this).text('Show');} else {$('#@nuspecId').show();$(this).text('Hide');}">Hide</a>
            <div id="@nuspecId" class="package-file-content">    
              <pre class="brush: xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!-- This is not exact, it's only based on what is stored about the package --&gt;
&lt;!-- description and releaseNotes left out for brevity --&gt;
&lt;package&gt;
  &lt;metadata&gt;
    &lt;!-- == PACKAGE SPECIFIC SECTION == --&gt;
    &lt;id&gt;@Model.Id&lt;/id&gt;
    &lt;version&gt;@Model.Version.to_string()&lt;/version&gt;
    @if (!string.IsNullOrWhiteSpace(@Model.PackageSourceUrl))
    {
    <text>&lt;packageSourceUrl&gt;@Model.PackageSourceUrl&lt;/packageSourceUrl&gt;</text> 
    } 
    &lt;owners&gt;NOTE: Original specified maintainers not included on site&lt;/owners&gt;
    &lt;!-- ============================== --&gt;
 
    &lt;!-- == SOFTWARE SPECIFIC SECTION == --&gt;
@if (!string.IsNullOrWhiteSpace(@Model.Title))
{
    <text>&lt;title&gt;@Model.Title&lt;/title&gt;</text>    
}
@if (Model.Authors.AnySafe())
{
    var authors = new System.Text.StringBuilder();
    foreach (var author in Model.Authors.OrEmptyListIfNull())
    {
        authors.Append(", " + author.Name.to_string().Trim());
    }
    if (authors.Length > 0) { authors.Remove(0, 2); }

    <text>&lt;authors&gt;@authors.to_string()&lt;/authors&gt;</text> 
}
@if (!string.IsNullOrWhiteSpace(@Model.ProjectUrl))
{
    <text>&lt;projectUrl&gt;@Model.ProjectUrl&lt;/projectUrl&gt;</text> 
}    
@if (!string.IsNullOrWhiteSpace(@Model.IconUrl))
{
    <text>&lt;iconUrl&gt;@Model.IconUrl&lt;/iconUrl&gt;</text> 
}
@if (!string.IsNullOrWhiteSpace(@Model.Copyright))
{
    <text>&lt;copyright&gt;@Model.Copyright&lt;/copyright&gt;</text> 
}
@if (!string.IsNullOrWhiteSpace(@Model.LicenseUrl))
{
    <text>&lt;licenseUrl&gt;@Model.LicenseUrl&lt;/licenseUrl&gt; 
    &lt;requireLicenseAcceptance&gt;NOTE: Original specified requireLicenseAcceptance not included on site&lt;/requireLicenseAcceptance&gt;</text>
}
@if (!string.IsNullOrWhiteSpace(@Model.ProjectSourceUrl))
{
    <text>&lt;projectSourceUrl&gt;@Model.ProjectSourceUrl&lt;/projectSourceUrl&gt;</text> 
}
@if (!string.IsNullOrWhiteSpace(@Model.DocsUrl))
{
    <text>&lt;docsUrl&gt;@Model.DocsUrl&lt;/docsUrl&gt;</text> 
}   
@if (!string.IsNullOrWhiteSpace(@Model.MailingListUrl))
{
    <text>&lt;mailingListUrl&gt;@Model.MailingListUrl&lt;/mailingListUrl&gt;</text> 
}   
@if (!string.IsNullOrWhiteSpace(@Model.BugTrackerUrl))
{
    <text>&lt;bugTrackerUrl&gt;@Model.BugTrackerUrl&lt;/bugTrackerUrl&gt;</text> 
}    
    &lt;summary&gt;NOTE: Not in model&lt;/summary&gt;
@if (@Model.Tags.AnySafe())
{
    var tags = new System.Text.StringBuilder();
    foreach (var tag in Model.Tags.OrEmptyListIfNull())
    {
        tags.Append(" " + tag.to_string().Trim());
    }
    if (tags.Length > 0) { tags.Remove(0, 1); }

    <text>&lt;tags&gt;@tags.to_string()&lt;/tags&gt;</text>
}   
@if (!string.IsNullOrWhiteSpace(@Model.Description))
{
    <text>&lt;description&gt;NOTE: Included, see above&lt;/description&gt;</text> 
}
@if (!string.IsNullOrWhiteSpace(@Model.ReleaseNotes))
{
    <text>&lt;releaseNotes&gt;NOTE: Included, see below&lt;/releaseNotes&gt;</text> 
}
    &lt;!-- =============================== --&gt; 
@if (Model.Dependencies.DependencySets.Any())
{
    <text>&lt;dependencies&gt;NOTE: Included, see below&lt;/dependencies&gt;</text> 
}
  &lt;/metadata&gt;
&lt;/package&gt;
          </pre>
          <script type="text/javascript">
            $('#@nuspecId').show()
          </script>
        </div>
      </li>
    </ul>    
  }
    @if (Model.Files.Any())
    {
        var random = new Random();
        <ul>
          @foreach (var file in Model.Files)
          {
              <li>@file.FilePath
                @if (!string.IsNullOrWhiteSpace(file.FileContent))
                {
                    var fileDivId = "div-" + Path.GetFileName(file.FilePath).Replace(".", "-").Replace(" ", string.Empty) + "-" + random.Next();
                    if (expandForModeration)
                    {
                        <a class="fileContentShowHide" onclick="if ($(this).text() == 'Hide') {$('#@fileDivId').hide();$(this).text('Show');} else {$('#@fileDivId').show();$(this).text('Hide');}">Hide</a>
                    }
                    else
                    {
                        <a class="fileContentShowHide" onclick="if ($(this).text() == 'Hide') {$('#@fileDivId').hide();$(this).text('Show');} else {$('#@fileDivId').show();$(this).text('Hide');}">Show</a>
                    }

                    <div id="@fileDivId" class="package-file-content">
                      @{ var langBrush = "";
                      }
                      @switch (Path.GetExtension(file.FilePath))
                      {
                          case ".ps1":
                          case ".psm1":
                              langBrush = "ps";
                              break;
                          case ".xml":
                          case ".config":
                          case ".nuspec":
                              langBrush = "xml";
                              break;
                          case ".js":
                          case ".json":
                              langBrush = "js";
                              break;
                          case ".template":
                              langBrush = "plain";
                              if (file.FilePath.EndsWith(".nuspec.template"))
                              {
                                  langBrush = "xml";
                              }
                              break;
                          default:
                              langBrush = "plain";
                              break;
                      }
                        <pre class="brush: @langBrush">@file.FileContent</pre>
                    </div>
                    if (expandForModeration)
                    {
                        <script type="text/javascript">
                          $('#@fileDivId').show()
                        </script>
                    }
                }
              </li>
          }
        </ul>
    }
    else
    {
        <ul>
          @if (@Model.PublishedDate < new DateTime(2014, 7, 25))
          {
              <li>This package was created prior to July 2014 - when package content started being included on the site. You can download and unzip the package or use <a href="https://chocolatey.org/packages/NugetPackageExplorer">Nuget Package Explorer</a> to see the contents.</li>
          }
          else
          {
              <li>This package has no content.</li>
          }
        </ul>
    }
  </div>
  
  
  <a name="virus" id="virus"></a><h3 title="Virus Scan Results">Virus Scan Results</h3>
    @if (Model.ScanResults.AnySafe())
    {
        <ul>
          @foreach (var fileScan in Model.ScanResults.OrEmptyListIfNull())
          {
          <li><a title="full sha256: @fileScan.Sha256Checksum" href="@fileScan.ScanDetailsUrl">@fileScan.FileName (@fileScan.Sha256Checksum.Substring(0,12))</a> 
            @if (User != null && HttpContext.Current.User.Identity.IsAuthenticated)
            {
                <text>-</text> @fileScan.Positives<text>/</text>@fileScan.TotalScans
            } else {
                <text>- ## / </text> @fileScan.TotalScans <text> - Log in or click on link to see number of positives</text>
            }
          </li>
          }
        </ul>
        <p class="message warning" style="font-size: 1em;">In cases where actual malware is found, the packages are subject to removal. Software sometimes has false positives. Moderators do not necessarily validate the safety of the underlying software, only that a package retrieves software from the official distribution point and/or validate embedded software against official distribution point (where distribution rights allow redistribution).
          Chocolatey Pro provides <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "features-virus-check" })">runtime protection</a> from possible malware.
        </p>
    }
    else
    {
        <p class="message" style="font-size: 1em;">No results available for this package. We are building up results for older packages over time so expect to see results. If this is a new package, it should have results within a day or two.</p>
    }     
    
  

  @Html.Partial("_PackageDependencies", Model.Dependencies)

    <a name="maintainers" id="maintainers"></a><h3 title="Nuspec reference: owners | nuspec value not used on community feed | Specified as comma-separated">Package Maintainer(s)</h3>
    @ViewHelpers.OwnersGravatar(Model.Owners, 32, Url)
    <a name="authors" id="authors"></a><h3 title="Software authors. Nuspec reference: authors | Specified as comma-separated">Software Author(s)</h3>
    <ul class="authors">
        @foreach (var author in Model.Authors)
        {
            <li>@author.Name.clean_html()</li>
        }
    </ul>
    @if (!String.IsNullOrEmpty(Model.Copyright))
    {
        <a name="authors" id="package-copyright"></a>
        <h3 title="Nuspec reference: copyright">Copyright</h3>
        <p>@Model.Copyright</p>
    }
    @if (@Model.Tags.AnySafe())
    {
        <a name="tags" id="tags"></a><h3 title="Nuspec reference: tags | Specified as space-separated">Tags</h3>
        <ul class="tags">
            @foreach (var tag in Model.Tags)
            {
                <li><a href="@Url.Search("tag:" + tag)" title="Search for @tag">@tag</a></li>
            }
        </ul>
    }

    @if (!String.IsNullOrWhiteSpace(Model.ReleaseNotes))
    {
        <a name="releasenotes" id="releasenotes"></a><h3 title="Nuspec reference: releaseNotes">Release Notes</h3>
        @Html.Raw(markdownGenerator.Transform(Model.ReleaseNotes.clean_html()))
    }

    <a name="versionhistory" id="versionhistory"></a><h3>Version History</h3>
    <table class="sexy-table">
        <thead>
            <tr>
                <th class="first">
                    Version
                </th>
                <th>
                    Downloads
                </th>
                <th>
                    Last updated
                </th>
                @if (Model.IsOwner(User))
                {
                    <th class="@(moderationRole ? "" : "last")">
                        Listed
                    </th>
                }
                <th class="@(moderationRole ? "" : "last")">
                    Status
                </th>
                @if (moderationRole)
                {
                    <th class="last">
                        Notes
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var packageVersion in Model.PackageVersions.Take(packageVersions < packageVersionsDefaultDisplay ? packageVersions : packageVersionsDefaultDisplay))
            {
              var packageVersionList = new ListPackageVersionViewModel(packageVersion, Model, moderationRole, markdownGenerator, displayVersion: true);
                @Html.Partial("_ListVersion", packageVersionList)
            }
        </tbody>
        @if (packageVersions > packageVersionsDefaultDisplay)
        {
            <tbody>
                @foreach (var packageVersion in Model.PackageVersions.Skip(packageVersionsDefaultDisplay))
                {
                  var packageVersionList = new ListPackageVersionViewModel(packageVersion, Model, moderationRole, markdownGenerator, displayVersion: false);
                    @Html.Partial("_ListVersion", packageVersionList)
                }
            </tbody>
        }
    </table>
     @if (packageVersions > packageVersionsDefaultDisplay)
     {
         <a onclick="if ($(this).text() == 'Hide') {$('.versionTableRowMore').hide();$(this).text('Show More');} else {$('.versionTableRowMore').show();$(this).text('Hide');}">Show More</a>
     }



</div>
<div class="package-page">
    <a name="discussion" id="discussion"></a><h3>Discussion for the @Model.Title Package</h3>
    <p>Ground rules:
        <ul>
            <li>This discussion is only about @Model.Title and the @Model.Title package. If you
                have feedback for Chocolatey, please contact the <a href="http://groups.google.com/group/chocolatey">
                google group</a>.</li>
            <li>This discussion will carry over multiple versions. If you have a comment about a
                particular version, please note that in your comments.</li>
            <li>The maintainers of this Chocolatey Package will be notified about new comments that are posted to this Disqus thread, however, it is NOT a guarantee that you
                will get a response.  If you do not hear back from the maintainers after posting a message below, please follow up by using the link
                on the left side of this page or follow this link to <a href="@Url.Action(MVC.Packages.ContactOwners(Model.Id))">
                contact maintainers</a>.  If you still hear nothing back, please follow the <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "package-triage-process" })">package triage process</a>.</li>
            <li>Tell us what you love about the package or @Model.Title, or tell us what needs improvement.</li>
            <li>Share your experiences with the package, or extra configuration or gotchas that
                you've found.</li>
            <li>If you use a url, the comment will be flagged for moderation until you've been whitelisted. Disqus moderated comments are approved on a weekly schedule if not sooner. It could take between 1-5 days for your comment to show up.</li>
        </ul>
    </p>
    @{
      var disqusUrl = "http://" + Request.Url.Host + @Url.Package(Model.Id);
      var disqusShortname = System.Configuration.ConfigurationManager.AppSettings["DisqusShortname"];
      bool forceSsl = Convert.ToBoolean(System.Configuration.ConfigurationManager.AppSettings["ForceSSL"]);
      var commentPostUrl = (forceSsl ? "https" : Request.Url.Scheme) + "://" + Request.Url.Authority + @Url.Package(Model.Id) + "/notify-comment";
    }
	<a name="disqus"></a>
  <div id="disqus_thread">
  </div>
  <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">
    Disqus</span></a>
    
@section BottomScripts {
  <script type="text/javascript" language="javascript">
      $(function () {
        Closeable.modal("chocolatey_hide_packages_disclaimer");
        if (!getCookie('chocolatey_hide_packages_disclaimer')) {
          $(".modal-closeable").css('display', 'block');
        }
      });
  </script>
  <script type="text/javascript" language="javascript">
    var disqus_shortname = '@disqusShortname';

    var disqus_url = '@disqusUrl';
    var commentItem;
    function disqus_config() {
      this.callbacks.onNewComment = [function (comment) {
        var commentViewModel = { Id: comment.id, Text: comment.text };

        // take the data and post it via json
        $.post('@commentPostUrl', commentViewModel, function (data) {
          // At the minute, it is fire and forget
        });
      } ];
    }

    (function () {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
  </script>

    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shCore.js")"></script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shBrushPlain.js")"></script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shBrushPowerShell.js")"></script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shBrushJScript.js")"></script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shBrushXml.js")"></script>
    <link type="text/css" rel="stylesheet" href="@Url.Content("~/Content/SyntaxHighlighter/shCore.css")" />
    <link type="text/css" rel="stylesheet" href="@Url.Content("~/Content/SyntaxHighlighter/shThemeDefault.css")" />

    <script type="text/javascript">
      SyntaxHighlighter.defaults['gutter'] = true;
      SyntaxHighlighter.defaults['tab-size'] = 2;
      SyntaxHighlighter.defaults['toolbar'] = false;
      SyntaxHighlighter.defaults['wrap-lines'] = false;
      SyntaxHighlighter.defaults['pad-line-numbers'] = false;
      SyntaxHighlighter.defaults['auto-links'] = true;
      SyntaxHighlighter.defaults['collapse'] = false;
      SyntaxHighlighter.all();
    </script>

    <script type="text/javascript">
        (function () {
            var showFiles = true;
            var $showHide = $("#showHideFilesListing");
            var $filesSection = $('#div-filessection');

            $showHide.click(function (e) {
                if (showFiles) {
                    showFiles = false;
                    $filesSection.hide();
                    $showHide.text('Show');
                } else {
                    showFiles = true;
                    $filesSection.show();
                    $showHide.text('Hide');
                }
            });
        })();
    </script>

    <noscript>
        Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments
        powered by Disqus.</a></noscript>
}

</div>
